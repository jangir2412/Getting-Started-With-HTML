Q1:

Version control is a system that records changes to files over time so that you can recall specific versions later. It is crucial in software development because:

- It tracks and manages changes to code.
- Developers can collaborate without overwriting each other's work.
- It enables reverting to earlier versions in case of bugs or mistakes.
- It provides a historical record of changes, including who made them and why.
- It supports branching and merging, making feature development and bug fixing more manageable.

Popular version control systems include Git, Mercurial, and Subversion.

-----------------------------------------------------------------------*-----------------------------------------------------------------*-----------------------------------------------------------------*
Q2:

The Git Workflow involves three main areas:

-Working Directory:
   This is your local directory where you add, edit, and delete files. These changes are untracked or modified but not yet committed.

-Staging Area (Index):
   When you run `git add`, changes from the working directory are moved here. It’s like preparing a snapshot of your changes for the next commit.

-Repository:
   Once you `git commit`, your changes are saved in the local Git repository. This is the permanent history of your code.


-----------------------------------------------------------------------*-----------------------------------------------------------------*-----------------------------------------------------------------*


Q3: 

`.gitignore` is a file where you specify files or directories that Git should ignore. It is important because:

-It prevents sensitive or irrelevant files (like passwords, API keys, system files, or build artifacts) from being committed to the repository.
-It keeps the repository clean and reduces clutter.
-It avoids potential security risks and unnecessary merge conflicts.


-----------------------------------------------------------------------*-----------------------------------------------------------------*-----------------------------------------------------------------*

Q4: 

GitHub is a cloud-based platform that hosts Git repositories and provides tools for collaboration. It allows developers to:

-Share code publicly or privately.
-Collaborate via Pull Requests, Issues, and Discussions.
-Track bugs, enhancements, and project planning.
-Automatically test and deploy code via CI/CD tools.

How it facilitates collaboration:
-Multiple developers can work on the same project.
-Forking and branching allow safe experimentation.
-Pull Requests enable code reviews and discussion.

Alternatives to GitHub:
-GitLab
-Bitbucket
-SourceForge
-Azure Repos

-----------------------------------------------------------------------*-----------------------------------------------------------------*-----------------------------------------------------------------*


Q5: 

1. Find a project: Browse [GitHub Explore](https://github.com/explore) or [Good First Issues](https://goodfirstissue.dev/).
2. Fork the repository: Creates a copy under your GitHub account.
3. Clone the repository:
   ```bash
   git clone https://github.com/your-username/project-name.git
   ```
4. Create a branch:

   ```bash
   git checkout -b feature/your-feature-name
   ```
5. Make changes: Edit or add files locally.
6. Stage and commit changes:

   ```bash
   git add .
   git commit -m "Your message"
   ```
7. Push to GitHub:

   ```bash
   git push origin feature/your-feature-name
   ```
8. Open a Pull Request (PR):
   Go to the original repo and click "Compare & Pull Request".
9. Participate in review: Respond to feedback from maintainers.
10. Get your PR merged: Once approved, it becomes part of the main project.



-----------------------------------------------------------------------*-----------------------------------------------------------------*-----------------------------------------------------------------*


Q6:

To deploy Tailwind CSS projects on GitHub Pages:

Steps to Deploy:

-Initialize a Git repo and push code to a new GitHub repository.
-Ensure your project has an `index.html` in the root.
-Go to 'Settings > Pages' in your GitHub repository.
-Under 'Source', select `main` branch and `/ (root)`.
-Click 'Save' — GitHub will generate a URL.

